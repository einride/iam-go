package geniam

import (
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
)

const generatedFilenameSuffix = "_iam.pb.go"

func GenerateFile(gen *protogen.Plugin, f *protogen.File) {
	filename := f.GeneratedFilenamePrefix + generatedFilenameSuffix
	g := gen.NewGeneratedFile(filename, f.GoImportPath)
	g.Skip()
	g.P("// Code generated by protoc-gen-go-iam. DO NOT EDIT.")
	g.P("// versions:")
	protocVersion := "(unknown)"
	if v := gen.Request.GetCompilerVersion(); v != nil {
		protocVersion = fmt.Sprintf("v%v.%v.%v", v.GetMajor(), v.GetMinor(), v.GetPatch())
		if s := v.GetSuffix(); s != "" {
			protocVersion += "-" + s
		}
	}
	g.P("// \tprotoc            ", protocVersion)
	g.P()
	g.P("package ", f.GoPackageName)
	g.P()
	for _, service := range f.Services {
		descriptor := descriptorCodeGenerator{gen: gen, file: f, service: service}
		authorization := authorizationCodeGenerator{gen: gen, file: f, service: service}
		if !descriptor.GeneratesCode() && !authorization.GeneratesCode() {
			continue
		}
		g.Unskip()
		descriptor.GenerateCode(g)
		authorization.GenerateCode(g)
	}
}
