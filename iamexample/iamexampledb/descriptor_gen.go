package iamexampledb

// Code generated by spanner-aip-go. DO NOT EDIT.

import (
	"cloud.google.com/go/spanner/spansql"
)

func Descriptor() DatabaseDescriptor {
	return &descriptor
}

var descriptor = databaseDescriptor{
	iamPolicyBindings: iamPolicyBindingsTableDescriptor{
		tableID: "iam_policy_bindings",
		resource: columnDescriptor{
			columnID:             "resource",
			columnType:           spansql.Type{Array: false, Base: 4, Len: 9223372036854775807},
			notNull:              true,
			allowCommitTimestamp: false,
		},
		bindingIndex: columnDescriptor{
			columnID:             "binding_index",
			columnType:           spansql.Type{Array: false, Base: 1, Len: 0},
			notNull:              true,
			allowCommitTimestamp: false,
		},
		role: columnDescriptor{
			columnID:             "role",
			columnType:           spansql.Type{Array: false, Base: 4, Len: 9223372036854775807},
			notNull:              true,
			allowCommitTimestamp: false,
		},
		memberIndex: columnDescriptor{
			columnID:             "member_index",
			columnType:           spansql.Type{Array: false, Base: 1, Len: 0},
			notNull:              true,
			allowCommitTimestamp: false,
		},
		member: columnDescriptor{
			columnID:             "member",
			columnType:           spansql.Type{Array: false, Base: 4, Len: 9223372036854775807},
			notNull:              true,
			allowCommitTimestamp: false,
		},
	},
	shippers: shippersTableDescriptor{
		tableID: "shippers",
		shipperId: columnDescriptor{
			columnID:             "shipper_id",
			columnType:           spansql.Type{Array: false, Base: 4, Len: 63},
			notNull:              true,
			allowCommitTimestamp: false,
		},
		createTime: columnDescriptor{
			columnID:             "create_time",
			columnType:           spansql.Type{Array: false, Base: 7, Len: 0},
			notNull:              true,
			allowCommitTimestamp: true,
		},
		updateTime: columnDescriptor{
			columnID:             "update_time",
			columnType:           spansql.Type{Array: false, Base: 7, Len: 0},
			notNull:              true,
			allowCommitTimestamp: true,
		},
		deleteTime: columnDescriptor{
			columnID:             "delete_time",
			columnType:           spansql.Type{Array: false, Base: 7, Len: 0},
			notNull:              false,
			allowCommitTimestamp: true,
		},
		displayName: columnDescriptor{
			columnID:             "display_name",
			columnType:           spansql.Type{Array: false, Base: 4, Len: 63},
			notNull:              true,
			allowCommitTimestamp: false,
		},
	},
	sites: sitesTableDescriptor{
		tableID: "sites",
		shipperId: columnDescriptor{
			columnID:             "shipper_id",
			columnType:           spansql.Type{Array: false, Base: 4, Len: 63},
			notNull:              true,
			allowCommitTimestamp: false,
		},
		siteId: columnDescriptor{
			columnID:             "site_id",
			columnType:           spansql.Type{Array: false, Base: 4, Len: 63},
			notNull:              true,
			allowCommitTimestamp: false,
		},
		createTime: columnDescriptor{
			columnID:             "create_time",
			columnType:           spansql.Type{Array: false, Base: 7, Len: 0},
			notNull:              true,
			allowCommitTimestamp: true,
		},
		updateTime: columnDescriptor{
			columnID:             "update_time",
			columnType:           spansql.Type{Array: false, Base: 7, Len: 0},
			notNull:              true,
			allowCommitTimestamp: true,
		},
		deleteTime: columnDescriptor{
			columnID:             "delete_time",
			columnType:           spansql.Type{Array: false, Base: 7, Len: 0},
			notNull:              false,
			allowCommitTimestamp: true,
		},
		displayName: columnDescriptor{
			columnID:             "display_name",
			columnType:           spansql.Type{Array: false, Base: 4, Len: 63},
			notNull:              false,
			allowCommitTimestamp: false,
		},
		latitude: columnDescriptor{
			columnID:             "latitude",
			columnType:           spansql.Type{Array: false, Base: 2, Len: 0},
			notNull:              false,
			allowCommitTimestamp: false,
		},
		longitude: columnDescriptor{
			columnID:             "longitude",
			columnType:           spansql.Type{Array: false, Base: 2, Len: 0},
			notNull:              false,
			allowCommitTimestamp: false,
		},
	},
	shipments: shipmentsTableDescriptor{
		tableID: "shipments",
		shipperId: columnDescriptor{
			columnID:             "shipper_id",
			columnType:           spansql.Type{Array: false, Base: 4, Len: 63},
			notNull:              true,
			allowCommitTimestamp: false,
		},
		shipmentId: columnDescriptor{
			columnID:             "shipment_id",
			columnType:           spansql.Type{Array: false, Base: 4, Len: 63},
			notNull:              true,
			allowCommitTimestamp: false,
		},
		createTime: columnDescriptor{
			columnID:             "create_time",
			columnType:           spansql.Type{Array: false, Base: 7, Len: 0},
			notNull:              true,
			allowCommitTimestamp: true,
		},
		updateTime: columnDescriptor{
			columnID:             "update_time",
			columnType:           spansql.Type{Array: false, Base: 7, Len: 0},
			notNull:              true,
			allowCommitTimestamp: true,
		},
		deleteTime: columnDescriptor{
			columnID:             "delete_time",
			columnType:           spansql.Type{Array: false, Base: 7, Len: 0},
			notNull:              false,
			allowCommitTimestamp: true,
		},
		originSiteId: columnDescriptor{
			columnID:             "origin_site_id",
			columnType:           spansql.Type{Array: false, Base: 4, Len: 63},
			notNull:              false,
			allowCommitTimestamp: false,
		},
		destinationSiteId: columnDescriptor{
			columnID:             "destination_site_id",
			columnType:           spansql.Type{Array: false, Base: 4, Len: 63},
			notNull:              false,
			allowCommitTimestamp: false,
		},
		pickupEarliestTime: columnDescriptor{
			columnID:             "pickup_earliest_time",
			columnType:           spansql.Type{Array: false, Base: 7, Len: 0},
			notNull:              false,
			allowCommitTimestamp: false,
		},
		pickupLatestTime: columnDescriptor{
			columnID:             "pickup_latest_time",
			columnType:           spansql.Type{Array: false, Base: 7, Len: 0},
			notNull:              false,
			allowCommitTimestamp: false,
		},
		deliveryEarliestTime: columnDescriptor{
			columnID:             "delivery_earliest_time",
			columnType:           spansql.Type{Array: false, Base: 7, Len: 0},
			notNull:              false,
			allowCommitTimestamp: false,
		},
		deliveryLatestTime: columnDescriptor{
			columnID:             "delivery_latest_time",
			columnType:           spansql.Type{Array: false, Base: 7, Len: 0},
			notNull:              false,
			allowCommitTimestamp: false,
		},
	},
	lineItems: lineItemsTableDescriptor{
		tableID: "line_items",
		shipperId: columnDescriptor{
			columnID:             "shipper_id",
			columnType:           spansql.Type{Array: false, Base: 4, Len: 63},
			notNull:              true,
			allowCommitTimestamp: false,
		},
		shipmentId: columnDescriptor{
			columnID:             "shipment_id",
			columnType:           spansql.Type{Array: false, Base: 4, Len: 63},
			notNull:              true,
			allowCommitTimestamp: false,
		},
		lineNumber: columnDescriptor{
			columnID:             "line_number",
			columnType:           spansql.Type{Array: false, Base: 1, Len: 0},
			notNull:              true,
			allowCommitTimestamp: false,
		},
		title: columnDescriptor{
			columnID:             "title",
			columnType:           spansql.Type{Array: false, Base: 4, Len: 63},
			notNull:              false,
			allowCommitTimestamp: false,
		},
		quantity: columnDescriptor{
			columnID:             "quantity",
			columnType:           spansql.Type{Array: false, Base: 2, Len: 0},
			notNull:              false,
			allowCommitTimestamp: false,
		},
		weightKg: columnDescriptor{
			columnID:             "weight_kg",
			columnType:           spansql.Type{Array: false, Base: 2, Len: 0},
			notNull:              false,
			allowCommitTimestamp: false,
		},
		volumeM3: columnDescriptor{
			columnID:             "volume_m3",
			columnType:           spansql.Type{Array: false, Base: 2, Len: 0},
			notNull:              false,
			allowCommitTimestamp: false,
		},
	},
	iamPolicyBindingsByMemberAndResource: iamPolicyBindingsByMemberAndResourceIndexDescriptor{
		indexID: "iam_policy_bindings_by_member_and_resource",
		member: columnDescriptor{
			columnID: "member",
		},
		resource: columnDescriptor{
			columnID: "resource",
		},
		role: columnDescriptor{
			columnID: "role",
		},
	},
	iamPolicyBindingsByMemberAndRole: iamPolicyBindingsByMemberAndRoleIndexDescriptor{
		indexID: "iam_policy_bindings_by_member_and_role",
		member: columnDescriptor{
			columnID: "member",
		},
		role: columnDescriptor{
			columnID: "role",
		},
		resource: columnDescriptor{
			columnID: "resource",
		},
	},
}

type DatabaseDescriptor interface {
	IamPolicyBindings() IamPolicyBindingsTableDescriptor
	Shippers() ShippersTableDescriptor
	Sites() SitesTableDescriptor
	Shipments() ShipmentsTableDescriptor
	LineItems() LineItemsTableDescriptor
	IamPolicyBindingsByMemberAndResource() IamPolicyBindingsByMemberAndResourceIndexDescriptor
	IamPolicyBindingsByMemberAndRole() IamPolicyBindingsByMemberAndRoleIndexDescriptor
}

type databaseDescriptor struct {
	iamPolicyBindings                    iamPolicyBindingsTableDescriptor
	shippers                             shippersTableDescriptor
	sites                                sitesTableDescriptor
	shipments                            shipmentsTableDescriptor
	lineItems                            lineItemsTableDescriptor
	iamPolicyBindingsByMemberAndResource iamPolicyBindingsByMemberAndResourceIndexDescriptor
	iamPolicyBindingsByMemberAndRole     iamPolicyBindingsByMemberAndRoleIndexDescriptor
}

func (d *databaseDescriptor) IamPolicyBindings() IamPolicyBindingsTableDescriptor {
	return &d.iamPolicyBindings
}

func (d *databaseDescriptor) Shippers() ShippersTableDescriptor {
	return &d.shippers
}

func (d *databaseDescriptor) Sites() SitesTableDescriptor {
	return &d.sites
}

func (d *databaseDescriptor) Shipments() ShipmentsTableDescriptor {
	return &d.shipments
}

func (d *databaseDescriptor) LineItems() LineItemsTableDescriptor {
	return &d.lineItems
}

func (d *databaseDescriptor) IamPolicyBindingsByMemberAndResource() IamPolicyBindingsByMemberAndResourceIndexDescriptor {
	return &d.iamPolicyBindingsByMemberAndResource
}

func (d *databaseDescriptor) IamPolicyBindingsByMemberAndRole() IamPolicyBindingsByMemberAndRoleIndexDescriptor {
	return &d.iamPolicyBindingsByMemberAndRole
}

type IamPolicyBindingsTableDescriptor interface {
	TableName() string
	TableID() spansql.ID
	ColumnNames() []string
	ColumnIDs() []spansql.ID
	ColumnExprs() []spansql.Expr
	Resource() ColumnDescriptor
	BindingIndex() ColumnDescriptor
	Role() ColumnDescriptor
	MemberIndex() ColumnDescriptor
	Member() ColumnDescriptor
}

type iamPolicyBindingsTableDescriptor struct {
	tableID      spansql.ID
	resource     columnDescriptor
	bindingIndex columnDescriptor
	role         columnDescriptor
	memberIndex  columnDescriptor
	member       columnDescriptor
}

func (d *iamPolicyBindingsTableDescriptor) TableName() string {
	return string(d.tableID)
}

func (d *iamPolicyBindingsTableDescriptor) TableID() spansql.ID {
	return d.tableID
}

func (d *iamPolicyBindingsTableDescriptor) ColumnNames() []string {
	return []string{
		"resource",
		"binding_index",
		"role",
		"member_index",
		"member",
	}
}

func (d *iamPolicyBindingsTableDescriptor) ColumnIDs() []spansql.ID {
	return []spansql.ID{
		"resource",
		"binding_index",
		"role",
		"member_index",
		"member",
	}
}

func (d *iamPolicyBindingsTableDescriptor) ColumnExprs() []spansql.Expr {
	return []spansql.Expr{
		spansql.ID("resource"),
		spansql.ID("binding_index"),
		spansql.ID("role"),
		spansql.ID("member_index"),
		spansql.ID("member"),
	}
}

func (d *iamPolicyBindingsTableDescriptor) Resource() ColumnDescriptor {
	return &d.resource
}

func (d *iamPolicyBindingsTableDescriptor) BindingIndex() ColumnDescriptor {
	return &d.bindingIndex
}

func (d *iamPolicyBindingsTableDescriptor) Role() ColumnDescriptor {
	return &d.role
}

func (d *iamPolicyBindingsTableDescriptor) MemberIndex() ColumnDescriptor {
	return &d.memberIndex
}

func (d *iamPolicyBindingsTableDescriptor) Member() ColumnDescriptor {
	return &d.member
}

type ShippersTableDescriptor interface {
	TableName() string
	TableID() spansql.ID
	ColumnNames() []string
	ColumnIDs() []spansql.ID
	ColumnExprs() []spansql.Expr
	ShipperId() ColumnDescriptor
	CreateTime() ColumnDescriptor
	UpdateTime() ColumnDescriptor
	DeleteTime() ColumnDescriptor
	DisplayName() ColumnDescriptor
}

type shippersTableDescriptor struct {
	tableID     spansql.ID
	shipperId   columnDescriptor
	createTime  columnDescriptor
	updateTime  columnDescriptor
	deleteTime  columnDescriptor
	displayName columnDescriptor
}

func (d *shippersTableDescriptor) TableName() string {
	return string(d.tableID)
}

func (d *shippersTableDescriptor) TableID() spansql.ID {
	return d.tableID
}

func (d *shippersTableDescriptor) ColumnNames() []string {
	return []string{
		"shipper_id",
		"create_time",
		"update_time",
		"delete_time",
		"display_name",
	}
}

func (d *shippersTableDescriptor) ColumnIDs() []spansql.ID {
	return []spansql.ID{
		"shipper_id",
		"create_time",
		"update_time",
		"delete_time",
		"display_name",
	}
}

func (d *shippersTableDescriptor) ColumnExprs() []spansql.Expr {
	return []spansql.Expr{
		spansql.ID("shipper_id"),
		spansql.ID("create_time"),
		spansql.ID("update_time"),
		spansql.ID("delete_time"),
		spansql.ID("display_name"),
	}
}

func (d *shippersTableDescriptor) ShipperId() ColumnDescriptor {
	return &d.shipperId
}

func (d *shippersTableDescriptor) CreateTime() ColumnDescriptor {
	return &d.createTime
}

func (d *shippersTableDescriptor) UpdateTime() ColumnDescriptor {
	return &d.updateTime
}

func (d *shippersTableDescriptor) DeleteTime() ColumnDescriptor {
	return &d.deleteTime
}

func (d *shippersTableDescriptor) DisplayName() ColumnDescriptor {
	return &d.displayName
}

type SitesTableDescriptor interface {
	TableName() string
	TableID() spansql.ID
	ColumnNames() []string
	ColumnIDs() []spansql.ID
	ColumnExprs() []spansql.Expr
	ShipperId() ColumnDescriptor
	SiteId() ColumnDescriptor
	CreateTime() ColumnDescriptor
	UpdateTime() ColumnDescriptor
	DeleteTime() ColumnDescriptor
	DisplayName() ColumnDescriptor
	Latitude() ColumnDescriptor
	Longitude() ColumnDescriptor
}

type sitesTableDescriptor struct {
	tableID     spansql.ID
	shipperId   columnDescriptor
	siteId      columnDescriptor
	createTime  columnDescriptor
	updateTime  columnDescriptor
	deleteTime  columnDescriptor
	displayName columnDescriptor
	latitude    columnDescriptor
	longitude   columnDescriptor
}

func (d *sitesTableDescriptor) TableName() string {
	return string(d.tableID)
}

func (d *sitesTableDescriptor) TableID() spansql.ID {
	return d.tableID
}

func (d *sitesTableDescriptor) ColumnNames() []string {
	return []string{
		"shipper_id",
		"site_id",
		"create_time",
		"update_time",
		"delete_time",
		"display_name",
		"latitude",
		"longitude",
	}
}

func (d *sitesTableDescriptor) ColumnIDs() []spansql.ID {
	return []spansql.ID{
		"shipper_id",
		"site_id",
		"create_time",
		"update_time",
		"delete_time",
		"display_name",
		"latitude",
		"longitude",
	}
}

func (d *sitesTableDescriptor) ColumnExprs() []spansql.Expr {
	return []spansql.Expr{
		spansql.ID("shipper_id"),
		spansql.ID("site_id"),
		spansql.ID("create_time"),
		spansql.ID("update_time"),
		spansql.ID("delete_time"),
		spansql.ID("display_name"),
		spansql.ID("latitude"),
		spansql.ID("longitude"),
	}
}

func (d *sitesTableDescriptor) ShipperId() ColumnDescriptor {
	return &d.shipperId
}

func (d *sitesTableDescriptor) SiteId() ColumnDescriptor {
	return &d.siteId
}

func (d *sitesTableDescriptor) CreateTime() ColumnDescriptor {
	return &d.createTime
}

func (d *sitesTableDescriptor) UpdateTime() ColumnDescriptor {
	return &d.updateTime
}

func (d *sitesTableDescriptor) DeleteTime() ColumnDescriptor {
	return &d.deleteTime
}

func (d *sitesTableDescriptor) DisplayName() ColumnDescriptor {
	return &d.displayName
}

func (d *sitesTableDescriptor) Latitude() ColumnDescriptor {
	return &d.latitude
}

func (d *sitesTableDescriptor) Longitude() ColumnDescriptor {
	return &d.longitude
}

type ShipmentsTableDescriptor interface {
	TableName() string
	TableID() spansql.ID
	ColumnNames() []string
	ColumnIDs() []spansql.ID
	ColumnExprs() []spansql.Expr
	ShipperId() ColumnDescriptor
	ShipmentId() ColumnDescriptor
	CreateTime() ColumnDescriptor
	UpdateTime() ColumnDescriptor
	DeleteTime() ColumnDescriptor
	OriginSiteId() ColumnDescriptor
	DestinationSiteId() ColumnDescriptor
	PickupEarliestTime() ColumnDescriptor
	PickupLatestTime() ColumnDescriptor
	DeliveryEarliestTime() ColumnDescriptor
	DeliveryLatestTime() ColumnDescriptor
}

type shipmentsTableDescriptor struct {
	tableID              spansql.ID
	shipperId            columnDescriptor
	shipmentId           columnDescriptor
	createTime           columnDescriptor
	updateTime           columnDescriptor
	deleteTime           columnDescriptor
	originSiteId         columnDescriptor
	destinationSiteId    columnDescriptor
	pickupEarliestTime   columnDescriptor
	pickupLatestTime     columnDescriptor
	deliveryEarliestTime columnDescriptor
	deliveryLatestTime   columnDescriptor
}

func (d *shipmentsTableDescriptor) TableName() string {
	return string(d.tableID)
}

func (d *shipmentsTableDescriptor) TableID() spansql.ID {
	return d.tableID
}

func (d *shipmentsTableDescriptor) ColumnNames() []string {
	return []string{
		"shipper_id",
		"shipment_id",
		"create_time",
		"update_time",
		"delete_time",
		"origin_site_id",
		"destination_site_id",
		"pickup_earliest_time",
		"pickup_latest_time",
		"delivery_earliest_time",
		"delivery_latest_time",
	}
}

func (d *shipmentsTableDescriptor) ColumnIDs() []spansql.ID {
	return []spansql.ID{
		"shipper_id",
		"shipment_id",
		"create_time",
		"update_time",
		"delete_time",
		"origin_site_id",
		"destination_site_id",
		"pickup_earliest_time",
		"pickup_latest_time",
		"delivery_earliest_time",
		"delivery_latest_time",
	}
}

func (d *shipmentsTableDescriptor) ColumnExprs() []spansql.Expr {
	return []spansql.Expr{
		spansql.ID("shipper_id"),
		spansql.ID("shipment_id"),
		spansql.ID("create_time"),
		spansql.ID("update_time"),
		spansql.ID("delete_time"),
		spansql.ID("origin_site_id"),
		spansql.ID("destination_site_id"),
		spansql.ID("pickup_earliest_time"),
		spansql.ID("pickup_latest_time"),
		spansql.ID("delivery_earliest_time"),
		spansql.ID("delivery_latest_time"),
	}
}

func (d *shipmentsTableDescriptor) ShipperId() ColumnDescriptor {
	return &d.shipperId
}

func (d *shipmentsTableDescriptor) ShipmentId() ColumnDescriptor {
	return &d.shipmentId
}

func (d *shipmentsTableDescriptor) CreateTime() ColumnDescriptor {
	return &d.createTime
}

func (d *shipmentsTableDescriptor) UpdateTime() ColumnDescriptor {
	return &d.updateTime
}

func (d *shipmentsTableDescriptor) DeleteTime() ColumnDescriptor {
	return &d.deleteTime
}

func (d *shipmentsTableDescriptor) OriginSiteId() ColumnDescriptor {
	return &d.originSiteId
}

func (d *shipmentsTableDescriptor) DestinationSiteId() ColumnDescriptor {
	return &d.destinationSiteId
}

func (d *shipmentsTableDescriptor) PickupEarliestTime() ColumnDescriptor {
	return &d.pickupEarliestTime
}

func (d *shipmentsTableDescriptor) PickupLatestTime() ColumnDescriptor {
	return &d.pickupLatestTime
}

func (d *shipmentsTableDescriptor) DeliveryEarliestTime() ColumnDescriptor {
	return &d.deliveryEarliestTime
}

func (d *shipmentsTableDescriptor) DeliveryLatestTime() ColumnDescriptor {
	return &d.deliveryLatestTime
}

type LineItemsTableDescriptor interface {
	TableName() string
	TableID() spansql.ID
	ColumnNames() []string
	ColumnIDs() []spansql.ID
	ColumnExprs() []spansql.Expr
	ShipperId() ColumnDescriptor
	ShipmentId() ColumnDescriptor
	LineNumber() ColumnDescriptor
	Title() ColumnDescriptor
	Quantity() ColumnDescriptor
	WeightKg() ColumnDescriptor
	VolumeM3() ColumnDescriptor
}

type lineItemsTableDescriptor struct {
	tableID    spansql.ID
	shipperId  columnDescriptor
	shipmentId columnDescriptor
	lineNumber columnDescriptor
	title      columnDescriptor
	quantity   columnDescriptor
	weightKg   columnDescriptor
	volumeM3   columnDescriptor
}

func (d *lineItemsTableDescriptor) TableName() string {
	return string(d.tableID)
}

func (d *lineItemsTableDescriptor) TableID() spansql.ID {
	return d.tableID
}

func (d *lineItemsTableDescriptor) ColumnNames() []string {
	return []string{
		"shipper_id",
		"shipment_id",
		"line_number",
		"title",
		"quantity",
		"weight_kg",
		"volume_m3",
	}
}

func (d *lineItemsTableDescriptor) ColumnIDs() []spansql.ID {
	return []spansql.ID{
		"shipper_id",
		"shipment_id",
		"line_number",
		"title",
		"quantity",
		"weight_kg",
		"volume_m3",
	}
}

func (d *lineItemsTableDescriptor) ColumnExprs() []spansql.Expr {
	return []spansql.Expr{
		spansql.ID("shipper_id"),
		spansql.ID("shipment_id"),
		spansql.ID("line_number"),
		spansql.ID("title"),
		spansql.ID("quantity"),
		spansql.ID("weight_kg"),
		spansql.ID("volume_m3"),
	}
}

func (d *lineItemsTableDescriptor) ShipperId() ColumnDescriptor {
	return &d.shipperId
}

func (d *lineItemsTableDescriptor) ShipmentId() ColumnDescriptor {
	return &d.shipmentId
}

func (d *lineItemsTableDescriptor) LineNumber() ColumnDescriptor {
	return &d.lineNumber
}

func (d *lineItemsTableDescriptor) Title() ColumnDescriptor {
	return &d.title
}

func (d *lineItemsTableDescriptor) Quantity() ColumnDescriptor {
	return &d.quantity
}

func (d *lineItemsTableDescriptor) WeightKg() ColumnDescriptor {
	return &d.weightKg
}

func (d *lineItemsTableDescriptor) VolumeM3() ColumnDescriptor {
	return &d.volumeM3
}

type IamPolicyBindingsByMemberAndResourceIndexDescriptor interface {
	IndexName() string
	IndexID() spansql.ID
	ColumnNames() []string
	ColumnIDs() []spansql.ID
	ColumnExprs() []spansql.Expr
	Member() ColumnDescriptor
	Resource() ColumnDescriptor
	Role() ColumnDescriptor
}

type iamPolicyBindingsByMemberAndResourceIndexDescriptor struct {
	indexID  spansql.ID
	member   columnDescriptor
	resource columnDescriptor
	role     columnDescriptor
}

func (d *iamPolicyBindingsByMemberAndResourceIndexDescriptor) IndexName() string {
	return string(d.indexID)
}

func (d *iamPolicyBindingsByMemberAndResourceIndexDescriptor) IndexID() spansql.ID {
	return d.indexID
}

func (d *iamPolicyBindingsByMemberAndResourceIndexDescriptor) ColumnNames() []string {
	return []string{
		"member",
		"resource",
		"role",
	}
}

func (d *iamPolicyBindingsByMemberAndResourceIndexDescriptor) ColumnIDs() []spansql.ID {
	return []spansql.ID{
		"member",
		"resource",
		"role",
	}
}

func (d *iamPolicyBindingsByMemberAndResourceIndexDescriptor) ColumnExprs() []spansql.Expr {
	return []spansql.Expr{
		spansql.ID("member"),
		spansql.ID("resource"),
		spansql.ID("role"),
	}
}

func (d *iamPolicyBindingsByMemberAndResourceIndexDescriptor) Member() ColumnDescriptor {
	return &d.member
}

func (d *iamPolicyBindingsByMemberAndResourceIndexDescriptor) Resource() ColumnDescriptor {
	return &d.resource
}

func (d *iamPolicyBindingsByMemberAndResourceIndexDescriptor) Role() ColumnDescriptor {
	return &d.role
}

type IamPolicyBindingsByMemberAndRoleIndexDescriptor interface {
	IndexName() string
	IndexID() spansql.ID
	ColumnNames() []string
	ColumnIDs() []spansql.ID
	ColumnExprs() []spansql.Expr
	Member() ColumnDescriptor
	Role() ColumnDescriptor
	Resource() ColumnDescriptor
}

type iamPolicyBindingsByMemberAndRoleIndexDescriptor struct {
	indexID  spansql.ID
	member   columnDescriptor
	role     columnDescriptor
	resource columnDescriptor
}

func (d *iamPolicyBindingsByMemberAndRoleIndexDescriptor) IndexName() string {
	return string(d.indexID)
}

func (d *iamPolicyBindingsByMemberAndRoleIndexDescriptor) IndexID() spansql.ID {
	return d.indexID
}

func (d *iamPolicyBindingsByMemberAndRoleIndexDescriptor) ColumnNames() []string {
	return []string{
		"member",
		"role",
		"resource",
	}
}

func (d *iamPolicyBindingsByMemberAndRoleIndexDescriptor) ColumnIDs() []spansql.ID {
	return []spansql.ID{
		"member",
		"role",
		"resource",
	}
}

func (d *iamPolicyBindingsByMemberAndRoleIndexDescriptor) ColumnExprs() []spansql.Expr {
	return []spansql.Expr{
		spansql.ID("member"),
		spansql.ID("role"),
		spansql.ID("resource"),
	}
}

func (d *iamPolicyBindingsByMemberAndRoleIndexDescriptor) Member() ColumnDescriptor {
	return &d.member
}

func (d *iamPolicyBindingsByMemberAndRoleIndexDescriptor) Role() ColumnDescriptor {
	return &d.role
}

func (d *iamPolicyBindingsByMemberAndRoleIndexDescriptor) Resource() ColumnDescriptor {
	return &d.resource
}

type ColumnDescriptor interface {
	ColumnID() spansql.ID
	ColumnName() string
	ColumnType() spansql.Type
	NotNull() bool
	AllowCommitTimestamp() bool
}

type columnDescriptor struct {
	columnID             spansql.ID
	columnType           spansql.Type
	notNull              bool
	allowCommitTimestamp bool
}

func (d *columnDescriptor) ColumnName() string {
	return string(d.columnID)
}

func (d *columnDescriptor) ColumnID() spansql.ID {
	return d.columnID
}

func (d *columnDescriptor) ColumnType() spansql.Type {
	return d.columnType
}

func (d *columnDescriptor) ColumnExpr() spansql.Expr {
	return d.columnID
}

func (d *columnDescriptor) NotNull() bool {
	return d.notNull
}

func (d *columnDescriptor) AllowCommitTimestamp() bool {
	return d.allowCommitTimestamp
}
