// Code generated by protoc-gen-go-iam. DO NOT EDIT.
// versions:
// 	protoc            v3.15.2

package iamexamplev1

import (
	context "context"
	fmt "fmt"
	iamauthz "go.einride.tech/iam/iamauthz"
	iamcel "go.einride.tech/iam/iamcel"
	iammember "go.einride.tech/iam/iammember"
	v1 "go.einride.tech/iam/proto/gen/einride/iam/v1"
	v12 "google.golang.org/genproto/googleapis/iam/admin/v1"
	v11 "google.golang.org/genproto/googleapis/iam/v1"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoregistry "google.golang.org/protobuf/reflect/protoregistry"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type FreightServiceIAMDescriptor struct {
	PredefinedRoles                    *v1.PredefinedRoles
	LongRunningOperationsAuthorization *v1.LongRunningOperationsAuthorizationOptions
	GetShipperAuthorization            *v1.MethodAuthorizationOptions
	ListShippersAuthorization          *v1.MethodAuthorizationOptions
	CreateShipperAuthorization         *v1.MethodAuthorizationOptions
	UpdateShipperAuthorization         *v1.MethodAuthorizationOptions
	DeleteShipperAuthorization         *v1.MethodAuthorizationOptions
	GetSiteAuthorization               *v1.MethodAuthorizationOptions
	ListSitesAuthorization             *v1.MethodAuthorizationOptions
	CreateSiteAuthorization            *v1.MethodAuthorizationOptions
	UpdateSiteAuthorization            *v1.MethodAuthorizationOptions
	DeleteSiteAuthorization            *v1.MethodAuthorizationOptions
	BatchGetSitesAuthorization         *v1.MethodAuthorizationOptions
	SearchSitesAuthorization           *v1.MethodAuthorizationOptions
	GetShipmentAuthorization           *v1.MethodAuthorizationOptions
	ListShipmentsAuthorization         *v1.MethodAuthorizationOptions
	CreateShipmentAuthorization        *v1.MethodAuthorizationOptions
	UpdateShipmentAuthorization        *v1.MethodAuthorizationOptions
	DeleteShipmentAuthorization        *v1.MethodAuthorizationOptions
	BatchGetShipmentsAuthorization     *v1.MethodAuthorizationOptions
	SetIamPolicyAuthorization          *v1.MethodAuthorizationOptions
	GetIamPolicyAuthorization          *v1.MethodAuthorizationOptions
	TestIamPermissionsAuthorization    *v1.MethodAuthorizationOptions
	ListRolesAuthorization             *v1.MethodAuthorizationOptions
	GetRoleAuthorization               *v1.MethodAuthorizationOptions
}

// NewFreightServiceIAMDescriptor returns a new FreightService IAM descriptor.
func NewFreightServiceIAMDescriptor() (*FreightServiceIAMDescriptor, error) {
	result := FreightServiceIAMDescriptor{
		PredefinedRoles:                    &v1.PredefinedRoles{},
		LongRunningOperationsAuthorization: &v1.LongRunningOperationsAuthorizationOptions{},
		GetShipperAuthorization:            &v1.MethodAuthorizationOptions{},
		ListShippersAuthorization:          &v1.MethodAuthorizationOptions{},
		CreateShipperAuthorization:         &v1.MethodAuthorizationOptions{},
		UpdateShipperAuthorization:         &v1.MethodAuthorizationOptions{},
		DeleteShipperAuthorization:         &v1.MethodAuthorizationOptions{},
		GetSiteAuthorization:               &v1.MethodAuthorizationOptions{},
		ListSitesAuthorization:             &v1.MethodAuthorizationOptions{},
		CreateSiteAuthorization:            &v1.MethodAuthorizationOptions{},
		UpdateSiteAuthorization:            &v1.MethodAuthorizationOptions{},
		DeleteSiteAuthorization:            &v1.MethodAuthorizationOptions{},
		BatchGetSitesAuthorization:         &v1.MethodAuthorizationOptions{},
		SearchSitesAuthorization:           &v1.MethodAuthorizationOptions{},
		GetShipmentAuthorization:           &v1.MethodAuthorizationOptions{},
		ListShipmentsAuthorization:         &v1.MethodAuthorizationOptions{},
		CreateShipmentAuthorization:        &v1.MethodAuthorizationOptions{},
		UpdateShipmentAuthorization:        &v1.MethodAuthorizationOptions{},
		DeleteShipmentAuthorization:        &v1.MethodAuthorizationOptions{},
		BatchGetShipmentsAuthorization:     &v1.MethodAuthorizationOptions{},
		SetIamPolicyAuthorization:          &v1.MethodAuthorizationOptions{},
		GetIamPolicyAuthorization:          &v1.MethodAuthorizationOptions{},
		TestIamPermissionsAuthorization:    &v1.MethodAuthorizationOptions{},
		ListRolesAuthorization:             &v1.MethodAuthorizationOptions{},
		GetRoleAuthorization:               &v1.MethodAuthorizationOptions{},
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x53, 0xa, 0x13, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0xd, 0x46, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x22, 0x46, 0x75, 0x6c, 0x6c, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x3a, 0x9, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x2a, 0xa, 0xd9, 0x2, 0xa, 0x14, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0xe, 0x46, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x1a, 0x1c, 0x45, 0x64, 0x69, 0x74, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x3a, 0x14, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x3a, 0x17, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x11, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x3a, 0x12, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x14, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x14, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x14, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x15, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x3a, 0x16, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x18, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x18, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x18, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0xa, 0xc7, 0x1, 0xa, 0x14, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0xe, 0x46, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x1a, 0x1c, 0x56, 0x69, 0x65, 0x77, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x3a, 0x14, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x3a, 0x15, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x11, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x3a, 0x12, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x15, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x3a, 0x16, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74},
		result.PredefinedRoles,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal pre-defined roles: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0xfb, 0x1, 0xa, 0x56, 0xa, 0x29, 0x69, 0x61, 0x6d, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x65, 0x69, 0x6e, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x7d, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x1e, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x1d, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x22, 0x20, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x2a, 0x20, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x32, 0x1e, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x77, 0x61, 0x69, 0x74, 0x18, 0x1},
		result.LongRunningOperationsAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal long-running operations authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x14, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x1a, 0x51, 0xa, 0x1a, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x1a, 0x33, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e},
		result.GetShipperAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal GetShipper method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x15, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x4a, 0xa, 0x11, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x27, 0x2f, 0x27, 0x29, 0x1a, 0x35, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e},
		result.ListShippersAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal ListShippers method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x17, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x4c, 0xa, 0x11, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x27, 0x2f, 0x27, 0x29, 0x1a, 0x37, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e},
		result.CreateShipperAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal CreateShipper method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x17, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x5c, 0xa, 0x22, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x1a, 0x36, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e},
		result.UpdateShipperAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal UpdateShipper method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x17, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x54, 0xa, 0x1a, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x1a, 0x36, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e},
		result.DeleteShipperAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal DeleteShipper method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x11, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x1a, 0x4e, 0xa, 0x1a, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x1a, 0x30, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x2e},
		result.GetSiteAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal GetSite method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x12, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x6b, 0xa, 0x1c, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x29, 0x1a, 0x4b, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x69, 0x74, 0x65, 0x73, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e},
		result.ListSitesAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal ListSites method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x14, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x6d, 0xa, 0x1c, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x29, 0x1a, 0x4d, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x73, 0x69, 0x74, 0x65, 0x73, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e},
		result.CreateSiteAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal CreateSite method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x14, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x56, 0xa, 0x1f, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x1a, 0x33, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x2e},
		result.UpdateSiteAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal UpdateSite method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x14, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x51, 0xa, 0x1a, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x1a, 0x33, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x2e},
		result.DeleteSiteAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal DeleteSite method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x11, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x1a, 0xd5, 0x1, 0xa, 0x3f, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x29, 0x1a, 0x91, 0x1, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x69, 0x74, 0x65, 0x73, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e},
		result.BatchGetSitesAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal BatchGetSites method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x11, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x22, 0xe5, 0x1, 0xa, 0x4f, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x70, 0x28, 0x73, 0x2c, 0x20, 0x73, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x29, 0x1a, 0x91, 0x1, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x69, 0x74, 0x65, 0x73, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e},
		result.SearchSitesAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal SearchSites method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x15, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x22, 0xb7, 0x2, 0xa, 0x51, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x79, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x2c, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5d, 0x29, 0x1a, 0xe1, 0x1, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x73, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x20, 0x73, 0x69, 0x74, 0x65, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x73, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x69, 0x74, 0x65, 0x2e},
		result.GetShipmentAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal GetShipment method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x16, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x6f, 0xa, 0x1c, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x29, 0x1a, 0x4f, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e},
		result.ListShipmentsAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal ListShipments method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x18, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0xe8, 0x2, 0xa, 0x63, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x79, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5d, 0x29, 0x1a, 0x80, 0x2, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x73, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x20, 0x73, 0x69, 0x74, 0x65, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x73, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x69, 0x74, 0x65, 0x2e},
		result.CreateShipmentAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal CreateShipment method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x18, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x28, 0x1},
		result.UpdateShipmentAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal UpdateShipment method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x18, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x55, 0xa, 0x1a, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x1a, 0x37, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e},
		result.DeleteShipmentAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal DeleteShipment method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x15, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x22, 0x96, 0x2, 0xa, 0x78, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x73, 0x2c, 0x20, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x79, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5b, 0x73, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x73, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x2c, 0x20, 0x73, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5d, 0x29, 0x29, 0x1a, 0x99, 0x1, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e},
		result.BatchGetShipmentsAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal BatchGetShipments method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0x12, 0xcb, 0x2, 0xa, 0x20, 0xa, 0x3, 0xa, 0x1, 0x2f, 0x12, 0x19, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x72, 0x6f, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xa, 0x57, 0xa, 0x36, 0xa, 0x20, 0x69, 0x61, 0x6d, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x65, 0x69, 0x6e, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x12, 0x12, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x7d, 0x12, 0x1d, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xa, 0x5e, 0xa, 0x40, 0xa, 0x1d, 0x69, 0x61, 0x6d, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x65, 0x69, 0x6e, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x53, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x7d, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x69, 0x74, 0x65, 0x7d, 0x12, 0x1a, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xa, 0x6e, 0xa, 0x4c, 0xa, 0x21, 0x69, 0x61, 0x6d, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x65, 0x69, 0x6e, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x7d, 0x2f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x7d, 0x12, 0x1e, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x63, 0xa, 0x1e, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x29, 0x1a, 0x41, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x27, 0x73, 0x20, 0x49, 0x41, 0x4d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e},
		result.SetIamPolicyAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal SetIamPolicy method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0x12, 0xcb, 0x2, 0xa, 0x20, 0xa, 0x3, 0xa, 0x1, 0x2f, 0x12, 0x19, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x72, 0x6f, 0x6f, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xa, 0x57, 0xa, 0x36, 0xa, 0x20, 0x69, 0x61, 0x6d, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x65, 0x69, 0x6e, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x12, 0x12, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x7d, 0x12, 0x1d, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xa, 0x5e, 0xa, 0x40, 0xa, 0x1d, 0x69, 0x61, 0x6d, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x65, 0x69, 0x6e, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x53, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x7d, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x69, 0x74, 0x65, 0x7d, 0x12, 0x1a, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xa, 0x6e, 0xa, 0x4c, 0xa, 0x21, 0x69, 0x61, 0x6d, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x65, 0x69, 0x6e, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x7d, 0x2f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x7d, 0x12, 0x1e, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x63, 0xa, 0x1e, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x29, 0x1a, 0x41, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x27, 0x73, 0x20, 0x49, 0x41, 0x4d, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e},
		result.GetIamPolicyAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal GetIamPolicy method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0x30, 0x1},
		result.TestIamPermissionsAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal TestIamPermissions method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x12, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x5c, 0xa, 0x11, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x27, 0x2f, 0x27, 0x29, 0x1a, 0x47, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x27, 0x73, 0x20, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2e},
		result.ListRolesAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal ListRoles method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x11, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x1a, 0x4e, 0xa, 0x1a, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x1a, 0x30, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2e},
		result.GetRoleAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new FreightService IAM descriptor: unmarshal GetRole method authorization: %w", err)
	}
	return &result, nil
}

// NewFreightServiceAuthorization creates a new authorization middleware for FreightService.
func NewFreightServiceAuthorization(
	next FreightServiceServer,
	permissionTester iamcel.PermissionTester,
	memberResolver iammember.Resolver,
) (*FreightServiceAuthorization, error) {
	descriptor, err := NewFreightServiceIAMDescriptor()
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	var result FreightServiceAuthorization
	result.next = next
	descriptorGetShipper, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.GetShipper")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for GetShipper")
	}
	methodGetShipper, ok := descriptorGetShipper.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for GetShipper")
	}
	beforeGetShipper, err := iamauthz.NewBeforeMethodAuthorization(
		methodGetShipper,
		descriptor.GetShipperAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeGetShipper = beforeGetShipper
	descriptorListShippers, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.ListShippers")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for ListShippers")
	}
	methodListShippers, ok := descriptorListShippers.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for ListShippers")
	}
	beforeListShippers, err := iamauthz.NewBeforeMethodAuthorization(
		methodListShippers,
		descriptor.ListShippersAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeListShippers = beforeListShippers
	descriptorCreateShipper, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.CreateShipper")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for CreateShipper")
	}
	methodCreateShipper, ok := descriptorCreateShipper.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for CreateShipper")
	}
	beforeCreateShipper, err := iamauthz.NewBeforeMethodAuthorization(
		methodCreateShipper,
		descriptor.CreateShipperAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeCreateShipper = beforeCreateShipper
	descriptorUpdateShipper, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.UpdateShipper")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for UpdateShipper")
	}
	methodUpdateShipper, ok := descriptorUpdateShipper.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for UpdateShipper")
	}
	beforeUpdateShipper, err := iamauthz.NewBeforeMethodAuthorization(
		methodUpdateShipper,
		descriptor.UpdateShipperAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeUpdateShipper = beforeUpdateShipper
	descriptorDeleteShipper, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.DeleteShipper")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for DeleteShipper")
	}
	methodDeleteShipper, ok := descriptorDeleteShipper.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for DeleteShipper")
	}
	beforeDeleteShipper, err := iamauthz.NewBeforeMethodAuthorization(
		methodDeleteShipper,
		descriptor.DeleteShipperAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeDeleteShipper = beforeDeleteShipper
	descriptorGetSite, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.GetSite")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for GetSite")
	}
	methodGetSite, ok := descriptorGetSite.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for GetSite")
	}
	beforeGetSite, err := iamauthz.NewBeforeMethodAuthorization(
		methodGetSite,
		descriptor.GetSiteAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeGetSite = beforeGetSite
	descriptorListSites, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.ListSites")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for ListSites")
	}
	methodListSites, ok := descriptorListSites.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for ListSites")
	}
	beforeListSites, err := iamauthz.NewBeforeMethodAuthorization(
		methodListSites,
		descriptor.ListSitesAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeListSites = beforeListSites
	descriptorCreateSite, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.CreateSite")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for CreateSite")
	}
	methodCreateSite, ok := descriptorCreateSite.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for CreateSite")
	}
	beforeCreateSite, err := iamauthz.NewBeforeMethodAuthorization(
		methodCreateSite,
		descriptor.CreateSiteAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeCreateSite = beforeCreateSite
	descriptorUpdateSite, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.UpdateSite")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for UpdateSite")
	}
	methodUpdateSite, ok := descriptorUpdateSite.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for UpdateSite")
	}
	beforeUpdateSite, err := iamauthz.NewBeforeMethodAuthorization(
		methodUpdateSite,
		descriptor.UpdateSiteAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeUpdateSite = beforeUpdateSite
	descriptorDeleteSite, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.DeleteSite")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for DeleteSite")
	}
	methodDeleteSite, ok := descriptorDeleteSite.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for DeleteSite")
	}
	beforeDeleteSite, err := iamauthz.NewBeforeMethodAuthorization(
		methodDeleteSite,
		descriptor.DeleteSiteAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeDeleteSite = beforeDeleteSite
	descriptorBatchGetSites, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.BatchGetSites")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for BatchGetSites")
	}
	methodBatchGetSites, ok := descriptorBatchGetSites.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for BatchGetSites")
	}
	beforeBatchGetSites, err := iamauthz.NewBeforeMethodAuthorization(
		methodBatchGetSites,
		descriptor.BatchGetSitesAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeBatchGetSites = beforeBatchGetSites
	descriptorSearchSites, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.SearchSites")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for SearchSites")
	}
	methodSearchSites, ok := descriptorSearchSites.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for SearchSites")
	}
	afterSearchSites, err := iamauthz.NewAfterMethodAuthorization(
		methodSearchSites,
		descriptor.SearchSitesAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.afterSearchSites = afterSearchSites
	descriptorGetShipment, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.GetShipment")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for GetShipment")
	}
	methodGetShipment, ok := descriptorGetShipment.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for GetShipment")
	}
	afterGetShipment, err := iamauthz.NewAfterMethodAuthorization(
		methodGetShipment,
		descriptor.GetShipmentAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.afterGetShipment = afterGetShipment
	descriptorListShipments, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.ListShipments")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for ListShipments")
	}
	methodListShipments, ok := descriptorListShipments.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for ListShipments")
	}
	beforeListShipments, err := iamauthz.NewBeforeMethodAuthorization(
		methodListShipments,
		descriptor.ListShipmentsAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeListShipments = beforeListShipments
	descriptorCreateShipment, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.CreateShipment")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for CreateShipment")
	}
	methodCreateShipment, ok := descriptorCreateShipment.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for CreateShipment")
	}
	beforeCreateShipment, err := iamauthz.NewBeforeMethodAuthorization(
		methodCreateShipment,
		descriptor.CreateShipmentAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeCreateShipment = beforeCreateShipment
	descriptorDeleteShipment, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.DeleteShipment")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for DeleteShipment")
	}
	methodDeleteShipment, ok := descriptorDeleteShipment.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for DeleteShipment")
	}
	beforeDeleteShipment, err := iamauthz.NewBeforeMethodAuthorization(
		methodDeleteShipment,
		descriptor.DeleteShipmentAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeDeleteShipment = beforeDeleteShipment
	descriptorBatchGetShipments, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.BatchGetShipments")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for BatchGetShipments")
	}
	methodBatchGetShipments, ok := descriptorBatchGetShipments.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for BatchGetShipments")
	}
	afterBatchGetShipments, err := iamauthz.NewAfterMethodAuthorization(
		methodBatchGetShipments,
		descriptor.BatchGetShipmentsAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.afterBatchGetShipments = afterBatchGetShipments
	descriptorSetIamPolicy, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.SetIamPolicy")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for SetIamPolicy")
	}
	methodSetIamPolicy, ok := descriptorSetIamPolicy.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for SetIamPolicy")
	}
	beforeSetIamPolicy, err := iamauthz.NewBeforeMethodAuthorization(
		methodSetIamPolicy,
		descriptor.SetIamPolicyAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeSetIamPolicy = beforeSetIamPolicy
	descriptorGetIamPolicy, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.GetIamPolicy")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for GetIamPolicy")
	}
	methodGetIamPolicy, ok := descriptorGetIamPolicy.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for GetIamPolicy")
	}
	beforeGetIamPolicy, err := iamauthz.NewBeforeMethodAuthorization(
		methodGetIamPolicy,
		descriptor.GetIamPolicyAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeGetIamPolicy = beforeGetIamPolicy
	descriptorListRoles, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.ListRoles")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for ListRoles")
	}
	methodListRoles, ok := descriptorListRoles.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for ListRoles")
	}
	beforeListRoles, err := iamauthz.NewBeforeMethodAuthorization(
		methodListRoles,
		descriptor.ListRolesAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeListRoles = beforeListRoles
	descriptorGetRole, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.iam.example.v1.FreightService.GetRole")
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: failed to find descriptor for GetRole")
	}
	methodGetRole, ok := descriptorGetRole.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new FreightService authorization: got non-method descriptor for GetRole")
	}
	beforeGetRole, err := iamauthz.NewBeforeMethodAuthorization(
		methodGetRole,
		descriptor.GetRoleAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeGetRole = beforeGetRole
	beforeLongRunningOperationMethod, err := iamauthz.NewBeforeLongRunningOperationMethodAuthorization(
		descriptor.LongRunningOperationsAuthorization,
		permissionTester,
		memberResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new FreightService authorization: %w", err)
	}
	result.beforeLongRunningOperationMethod = beforeLongRunningOperationMethod
	return &result, nil
}

type FreightServiceAuthorization struct {
	next                             FreightServiceServer
	beforeGetShipper                 *iamauthz.BeforeMethodAuthorization
	beforeListShippers               *iamauthz.BeforeMethodAuthorization
	beforeCreateShipper              *iamauthz.BeforeMethodAuthorization
	beforeUpdateShipper              *iamauthz.BeforeMethodAuthorization
	beforeDeleteShipper              *iamauthz.BeforeMethodAuthorization
	beforeGetSite                    *iamauthz.BeforeMethodAuthorization
	beforeListSites                  *iamauthz.BeforeMethodAuthorization
	beforeCreateSite                 *iamauthz.BeforeMethodAuthorization
	beforeUpdateSite                 *iamauthz.BeforeMethodAuthorization
	beforeDeleteSite                 *iamauthz.BeforeMethodAuthorization
	beforeBatchGetSites              *iamauthz.BeforeMethodAuthorization
	afterSearchSites                 *iamauthz.AfterMethodAuthorization
	afterGetShipment                 *iamauthz.AfterMethodAuthorization
	beforeListShipments              *iamauthz.BeforeMethodAuthorization
	beforeCreateShipment             *iamauthz.BeforeMethodAuthorization
	beforeDeleteShipment             *iamauthz.BeforeMethodAuthorization
	afterBatchGetShipments           *iamauthz.AfterMethodAuthorization
	beforeSetIamPolicy               *iamauthz.BeforeMethodAuthorization
	beforeGetIamPolicy               *iamauthz.BeforeMethodAuthorization
	beforeListRoles                  *iamauthz.BeforeMethodAuthorization
	beforeGetRole                    *iamauthz.BeforeMethodAuthorization
	beforeLongRunningOperationMethod *iamauthz.BeforeLongRunningOperationMethodAuthorization
}

func (a *FreightServiceAuthorization) GetShipper(
	ctx context.Context,
	request *GetShipperRequest,
) (*Shipper, error) {
	ctx, err := a.beforeGetShipper.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.GetShipper(ctx, request)
}

func (a *FreightServiceAuthorization) ListShippers(
	ctx context.Context,
	request *ListShippersRequest,
) (*ListShippersResponse, error) {
	ctx, err := a.beforeListShippers.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.ListShippers(ctx, request)
}

func (a *FreightServiceAuthorization) CreateShipper(
	ctx context.Context,
	request *CreateShipperRequest,
) (*Shipper, error) {
	ctx, err := a.beforeCreateShipper.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.CreateShipper(ctx, request)
}

func (a *FreightServiceAuthorization) UpdateShipper(
	ctx context.Context,
	request *UpdateShipperRequest,
) (*Shipper, error) {
	ctx, err := a.beforeUpdateShipper.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.UpdateShipper(ctx, request)
}

func (a *FreightServiceAuthorization) DeleteShipper(
	ctx context.Context,
	request *DeleteShipperRequest,
) (*longrunning.Operation, error) {
	ctx, err := a.beforeDeleteShipper.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.DeleteShipper(ctx, request)
}

func (a *FreightServiceAuthorization) GetSite(
	ctx context.Context,
	request *GetSiteRequest,
) (*Site, error) {
	ctx, err := a.beforeGetSite.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.GetSite(ctx, request)
}

func (a *FreightServiceAuthorization) ListSites(
	ctx context.Context,
	request *ListSitesRequest,
) (*ListSitesResponse, error) {
	ctx, err := a.beforeListSites.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.ListSites(ctx, request)
}

func (a *FreightServiceAuthorization) CreateSite(
	ctx context.Context,
	request *CreateSiteRequest,
) (*Site, error) {
	ctx, err := a.beforeCreateSite.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.CreateSite(ctx, request)
}

func (a *FreightServiceAuthorization) UpdateSite(
	ctx context.Context,
	request *UpdateSiteRequest,
) (*Site, error) {
	ctx, err := a.beforeUpdateSite.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.UpdateSite(ctx, request)
}

func (a *FreightServiceAuthorization) DeleteSite(
	ctx context.Context,
	request *DeleteSiteRequest,
) (*Site, error) {
	ctx, err := a.beforeDeleteSite.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.DeleteSite(ctx, request)
}

func (a *FreightServiceAuthorization) BatchGetSites(
	ctx context.Context,
	request *BatchGetSitesRequest,
) (*BatchGetSitesResponse, error) {
	ctx, err := a.beforeBatchGetSites.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.BatchGetSites(ctx, request)
}

func (a *FreightServiceAuthorization) SearchSites(
	ctx context.Context,
	request *SearchSitesRequest,
) (*SearchSitesResponse, error) {
	response, err := a.next.SearchSites(ctx, request)
	_, errAuth := a.afterSearchSites.AuthorizeRequestAndResponse(ctx, request, response)
	if errAuth != nil {
		return nil, errAuth
	}
	return response, err
}

func (a *FreightServiceAuthorization) GetShipment(
	ctx context.Context,
	request *GetShipmentRequest,
) (*Shipment, error) {
	response, err := a.next.GetShipment(ctx, request)
	_, errAuth := a.afterGetShipment.AuthorizeRequestAndResponse(ctx, request, response)
	if errAuth != nil {
		return nil, errAuth
	}
	return response, err
}

func (a *FreightServiceAuthorization) ListShipments(
	ctx context.Context,
	request *ListShipmentsRequest,
) (*ListShipmentsResponse, error) {
	ctx, err := a.beforeListShipments.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.ListShipments(ctx, request)
}

func (a *FreightServiceAuthorization) CreateShipment(
	ctx context.Context,
	request *CreateShipmentRequest,
) (*Shipment, error) {
	ctx, err := a.beforeCreateShipment.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.CreateShipment(ctx, request)
}

func (a *FreightServiceAuthorization) UpdateShipment(
	ctx context.Context,
	request *UpdateShipmentRequest,
) (*Shipment, error) {
	return nil, status.Error(codes.Internal, "custom authorization not implemented")
}

func (a *FreightServiceAuthorization) DeleteShipment(
	ctx context.Context,
	request *DeleteShipmentRequest,
) (*Shipment, error) {
	ctx, err := a.beforeDeleteShipment.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.DeleteShipment(ctx, request)
}

func (a *FreightServiceAuthorization) BatchGetShipments(
	ctx context.Context,
	request *BatchGetShipmentsRequest,
) (*BatchGetShipmentsResponse, error) {
	response, err := a.next.BatchGetShipments(ctx, request)
	_, errAuth := a.afterBatchGetShipments.AuthorizeRequestAndResponse(ctx, request, response)
	if errAuth != nil {
		return nil, errAuth
	}
	return response, err
}

func (a *FreightServiceAuthorization) SetIamPolicy(
	ctx context.Context,
	request *v11.SetIamPolicyRequest,
) (*v11.Policy, error) {
	ctx, err := a.beforeSetIamPolicy.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.SetIamPolicy(ctx, request)
}

func (a *FreightServiceAuthorization) GetIamPolicy(
	ctx context.Context,
	request *v11.GetIamPolicyRequest,
) (*v11.Policy, error) {
	ctx, err := a.beforeGetIamPolicy.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.GetIamPolicy(ctx, request)
}

func (a *FreightServiceAuthorization) TestIamPermissions(
	ctx context.Context,
	request *v11.TestIamPermissionsRequest,
) (*v11.TestIamPermissionsResponse, error) {
	iamauthz.Authorize(ctx)
	return a.next.TestIamPermissions(ctx, request)
}

func (a *FreightServiceAuthorization) ListRoles(
	ctx context.Context,
	request *v12.ListRolesRequest,
) (*v12.ListRolesResponse, error) {
	ctx, err := a.beforeListRoles.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.ListRoles(ctx, request)
}

func (a *FreightServiceAuthorization) GetRole(
	ctx context.Context,
	request *v12.GetRoleRequest,
) (*v12.Role, error) {
	ctx, err := a.beforeGetRole.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.GetRole(ctx, request)
}

func (a *FreightServiceAuthorization) ListOperations(
	ctx context.Context,
	request *longrunning.ListOperationsRequest,
) (*longrunning.ListOperationsResponse, error) {
	ctx, err := a.beforeLongRunningOperationMethod.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	impl, ok := a.next.(interface {
		ListOperations(context.Context, *longrunning.ListOperationsRequest) (*longrunning.ListOperationsResponse, error)
	})
	if !ok {
		return nil, status.Error(codes.Unimplemented, "ListOperations not implemented")
	}
	return impl.ListOperations(ctx, request)
}

func (a *FreightServiceAuthorization) GetOperation(
	ctx context.Context,
	request *longrunning.GetOperationRequest,
) (*longrunning.Operation, error) {
	ctx, err := a.beforeLongRunningOperationMethod.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	impl, ok := a.next.(interface {
		GetOperation(context.Context, *longrunning.GetOperationRequest) (*longrunning.Operation, error)
	})
	if !ok {
		return nil, status.Error(codes.Unimplemented, "GetOperation not implemented")
	}
	return impl.GetOperation(ctx, request)
}

func (a *FreightServiceAuthorization) DeleteOperation(
	ctx context.Context,
	request *longrunning.DeleteOperationRequest,
) (*emptypb.Empty, error) {
	ctx, err := a.beforeLongRunningOperationMethod.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	impl, ok := a.next.(interface {
		DeleteOperation(context.Context, *longrunning.DeleteOperationRequest) (*emptypb.Empty, error)
	})
	if !ok {
		return nil, status.Error(codes.Unimplemented, "DeleteOperation not implemented")
	}
	return impl.DeleteOperation(ctx, request)
}

func (a *FreightServiceAuthorization) CancelOperation(
	ctx context.Context,
	request *longrunning.CancelOperationRequest,
) (*emptypb.Empty, error) {
	ctx, err := a.beforeLongRunningOperationMethod.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	impl, ok := a.next.(interface {
		CancelOperation(context.Context, *longrunning.CancelOperationRequest) (*emptypb.Empty, error)
	})
	if !ok {
		return nil, status.Error(codes.Unimplemented, "CancelOperation not implemented")
	}
	return impl.CancelOperation(ctx, request)
}

func (a *FreightServiceAuthorization) WaitOperation(
	ctx context.Context,
	request *longrunning.WaitOperationRequest,
) (*longrunning.Operation, error) {
	ctx, err := a.beforeLongRunningOperationMethod.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	impl, ok := a.next.(interface {
		WaitOperation(context.Context, *longrunning.WaitOperationRequest) (*longrunning.Operation, error)
	})
	if !ok {
		return nil, status.Error(codes.Unimplemented, "WaitOperation not implemented")
	}
	return impl.WaitOperation(ctx, request)
}
