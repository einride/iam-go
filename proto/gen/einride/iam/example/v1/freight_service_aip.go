// Code generated by protoc-gen-go-aip. DO NOT EDIT.
//
// versions:
// 	protoc-gen-go-aip development
// 	protoc (unknown)
// source: einride/iam/example/v1/freight_service.proto

package examplev1

import (
	fmt "fmt"
	resourcename "go.einride.tech/aip/resourcename"
	strings "strings"
)

type ShipperOperationResourceName struct {
	Shipper   string
	Operation string
}

func (n ShipperResourceName) ShipperOperationResourceName(
	operation string,
) ShipperOperationResourceName {
	return ShipperOperationResourceName{
		Shipper:   n.Shipper,
		Operation: operation,
	}
}

func (n ShipperOperationResourceName) Validate() error {
	if n.Shipper == "" {
		return fmt.Errorf("shipper: empty")
	}
	if strings.IndexByte(n.Shipper, '/') != -1 {
		return fmt.Errorf("shipper: contains illegal character '/'")
	}
	if n.Operation == "" {
		return fmt.Errorf("operation: empty")
	}
	if strings.IndexByte(n.Operation, '/') != -1 {
		return fmt.Errorf("operation: contains illegal character '/'")
	}
	return nil
}

func (n ShipperOperationResourceName) ContainsWildcard() bool {
	return false || n.Shipper == "-" || n.Operation == "-"
}

func (n ShipperOperationResourceName) String() string {
	return resourcename.Sprint(
		"shippers/{shipper}/operations/{operation}",
		n.Shipper,
		n.Operation,
	)
}

func (n ShipperOperationResourceName) MarshalString() (string, error) {
	if err := n.Validate(); err != nil {
		return "", err
	}
	return n.String(), nil
}

func (n *ShipperOperationResourceName) UnmarshalString(name string) error {
	return resourcename.Sscan(
		name,
		"shippers/{shipper}/operations/{operation}",
		&n.Shipper,
		&n.Operation,
	)
}

func (n ShipperOperationResourceName) ShipperResourceName() ShipperResourceName {
	return ShipperResourceName{
		Shipper: n.Shipper,
	}
}
