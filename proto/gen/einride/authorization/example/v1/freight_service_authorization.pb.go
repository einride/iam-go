// Code generated by authorization-aip-go. DO NOT EDIT.
//
// source: einride/authorization/example/v1/freight_service.proto

package authorizationexamplev1

import (
	context "context"
	cel "github.com/google/cel-go/cel"
	v1 "go.einride.tech/authorization-aip/proto/gen/einride/authorization/v1"
	v11 "google.golang.org/genproto/googleapis/iam/v1"
)

type FreightServiceAuthorizationMiddleware struct {
	next                     FreightServiceServer
	callerFn                 func(context.Context) (v1.Caller, error)
	permissionTester         PermissionTester
	programGetShipper        cel.Program
	programListShippers      cel.Program
	programCreateShipper     cel.Program
	programUpdateShipper     cel.Program
	programDeleteShipper     cel.Program
	programGetSite           cel.Program
	programListSites         cel.Program
	programCreateSite        cel.Program
	programUpdateSite        cel.Program
	programDeleteSite        cel.Program
	programGetShipment       cel.Program
	programListShipments     cel.Program
	programCreateShipment    cel.Program
	programDeleteShipment    cel.Program
	programBatchGetShipments cel.Program
}

var _ FreightServiceServer = &FreightServiceAuthorizationMiddleware{}

type PermissionTester interface {
	Test(ctx context.Context, permission string, caller *v1.Caller, resource string) (bool, error)
	TestAll(ctx context.Context, permission string, caller *v1.Caller, resources []string) (bool, error)
	TestAny(ctx context.Context, permission string, caller *v1.Caller, resources []string) (bool, error)
}

func NewFreightServiceAuthorizationMiddleware(
	next FreightServiceServer,
	callerFn func(context.Context) (v1.Caller, error),
	permissionTester PermissionTester,
) (
	_ *FreightServiceAuthorizationMiddleware, err error,
) {
	m := FreightServiceAuthorizationMiddleware{
		next:             next,
		callerFn:         callerFn,
		permissionTester: permissionTester,
	}
	return &m, nil
}

func (m *FreightServiceAuthorizationMiddleware) mustEmbedUnimplementedFreightServiceServer() {}

func (m *FreightServiceAuthorizationMiddleware) GetShipper(
	ctx context.Context,
	request *GetShipperRequest,
) (
	*Shipper, error,
) {
	caller, err := m.callerFn(ctx)
	if err != nil {
		return nil, err
	}
	val, _, err := m.programGetShipper.Eval(map[string]interface{}{
		"caller":  caller,
		"request": request,
	})
	if err != nil {
		return nil, err
	}
	boolVal, ok := val.Value().(bool)
	if !ok {
		return nil, nil // TODO: Return error.
	}
	if !boolVal {
		return nil, nil // TODO: Return error.
	}

	return m.next.GetShipper(ctx, request)
}

func (m *FreightServiceAuthorizationMiddleware) ListShippers(
	ctx context.Context,
	request *ListShippersRequest,
) (
	*ListShippersResponse, error,
) {
	caller, err := m.callerFn(ctx)
	if err != nil {
		return nil, err
	}
	val, _, err := m.programListShippers.Eval(map[string]interface{}{
		"caller":  caller,
		"request": request,
	})
	if err != nil {
		return nil, err
	}
	boolVal, ok := val.Value().(bool)
	if !ok {
		return nil, nil // TODO: Return error.
	}
	if !boolVal {
		return nil, nil // TODO: Return error.
	}

	return m.next.ListShippers(ctx, request)
}

func (m *FreightServiceAuthorizationMiddleware) CreateShipper(
	ctx context.Context,
	request *CreateShipperRequest,
) (
	*Shipper, error,
) {
	caller, err := m.callerFn(ctx)
	if err != nil {
		return nil, err
	}
	val, _, err := m.programCreateShipper.Eval(map[string]interface{}{
		"caller":  caller,
		"request": request,
	})
	if err != nil {
		return nil, err
	}
	boolVal, ok := val.Value().(bool)
	if !ok {
		return nil, nil // TODO: Return error.
	}
	if !boolVal {
		return nil, nil // TODO: Return error.
	}

	return m.next.CreateShipper(ctx, request)
}

func (m *FreightServiceAuthorizationMiddleware) UpdateShipper(
	ctx context.Context,
	request *UpdateShipperRequest,
) (
	*Shipper, error,
) {
	caller, err := m.callerFn(ctx)
	if err != nil {
		return nil, err
	}
	val, _, err := m.programUpdateShipper.Eval(map[string]interface{}{
		"caller":  caller,
		"request": request,
	})
	if err != nil {
		return nil, err
	}
	boolVal, ok := val.Value().(bool)
	if !ok {
		return nil, nil // TODO: Return error.
	}
	if !boolVal {
		return nil, nil // TODO: Return error.
	}

	return m.next.UpdateShipper(ctx, request)
}

func (m *FreightServiceAuthorizationMiddleware) DeleteShipper(
	ctx context.Context,
	request *DeleteShipperRequest,
) (
	*Shipper, error,
) {
	caller, err := m.callerFn(ctx)
	if err != nil {
		return nil, err
	}
	val, _, err := m.programDeleteShipper.Eval(map[string]interface{}{
		"caller":  caller,
		"request": request,
	})
	if err != nil {
		return nil, err
	}
	boolVal, ok := val.Value().(bool)
	if !ok {
		return nil, nil // TODO: Return error.
	}
	if !boolVal {
		return nil, nil // TODO: Return error.
	}

	return m.next.DeleteShipper(ctx, request)
}

func (m *FreightServiceAuthorizationMiddleware) GetSite(
	ctx context.Context,
	request *GetSiteRequest,
) (
	*Site, error,
) {
	caller, err := m.callerFn(ctx)
	if err != nil {
		return nil, err
	}
	val, _, err := m.programGetSite.Eval(map[string]interface{}{
		"caller":  caller,
		"request": request,
	})
	if err != nil {
		return nil, err
	}
	boolVal, ok := val.Value().(bool)
	if !ok {
		return nil, nil // TODO: Return error.
	}
	if !boolVal {
		return nil, nil // TODO: Return error.
	}

	return m.next.GetSite(ctx, request)
}

func (m *FreightServiceAuthorizationMiddleware) ListSites(
	ctx context.Context,
	request *ListSitesRequest,
) (
	*ListSitesResponse, error,
) {
	caller, err := m.callerFn(ctx)
	if err != nil {
		return nil, err
	}
	val, _, err := m.programListSites.Eval(map[string]interface{}{
		"caller":  caller,
		"request": request,
	})
	if err != nil {
		return nil, err
	}
	boolVal, ok := val.Value().(bool)
	if !ok {
		return nil, nil // TODO: Return error.
	}
	if !boolVal {
		return nil, nil // TODO: Return error.
	}

	return m.next.ListSites(ctx, request)
}

func (m *FreightServiceAuthorizationMiddleware) CreateSite(
	ctx context.Context,
	request *CreateSiteRequest,
) (
	*Site, error,
) {
	caller, err := m.callerFn(ctx)
	if err != nil {
		return nil, err
	}
	val, _, err := m.programCreateSite.Eval(map[string]interface{}{
		"caller":  caller,
		"request": request,
	})
	if err != nil {
		return nil, err
	}
	boolVal, ok := val.Value().(bool)
	if !ok {
		return nil, nil // TODO: Return error.
	}
	if !boolVal {
		return nil, nil // TODO: Return error.
	}

	return m.next.CreateSite(ctx, request)
}

func (m *FreightServiceAuthorizationMiddleware) UpdateSite(
	ctx context.Context,
	request *UpdateSiteRequest,
) (
	*Site, error,
) {
	caller, err := m.callerFn(ctx)
	if err != nil {
		return nil, err
	}
	val, _, err := m.programUpdateSite.Eval(map[string]interface{}{
		"caller":  caller,
		"request": request,
	})
	if err != nil {
		return nil, err
	}
	boolVal, ok := val.Value().(bool)
	if !ok {
		return nil, nil // TODO: Return error.
	}
	if !boolVal {
		return nil, nil // TODO: Return error.
	}

	return m.next.UpdateSite(ctx, request)
}

func (m *FreightServiceAuthorizationMiddleware) DeleteSite(
	ctx context.Context,
	request *DeleteSiteRequest,
) (
	*Site, error,
) {
	caller, err := m.callerFn(ctx)
	if err != nil {
		return nil, err
	}
	val, _, err := m.programDeleteSite.Eval(map[string]interface{}{
		"caller":  caller,
		"request": request,
	})
	if err != nil {
		return nil, err
	}
	boolVal, ok := val.Value().(bool)
	if !ok {
		return nil, nil // TODO: Return error.
	}
	if !boolVal {
		return nil, nil // TODO: Return error.
	}

	return m.next.DeleteSite(ctx, request)
}

func (m *FreightServiceAuthorizationMiddleware) GetShipment(
	ctx context.Context,
	request *GetShipmentRequest,
) (
	*Shipment, error,
) {
	caller, err := m.callerFn(ctx)
	if err != nil {
		return nil, err
	}
	response, err := m.next.GetShipment(ctx, request)
	if err != nil {
		return nil, err
	}
	val, _, err := m.programGetShipment.Eval(map[string]interface{}{
		"caller":   caller,
		"request":  request,
		"response": response,
	})
	if err != nil {
		return nil, err
	}
	boolVal, ok := val.Value().(bool)
	if !ok {
		return nil, nil // TODO: Return error.
	}
	if !boolVal {
		return nil, nil // TODO: Return error.
	}
	return response, nil
}

func (m *FreightServiceAuthorizationMiddleware) ListShipments(
	ctx context.Context,
	request *ListShipmentsRequest,
) (
	*ListShipmentsResponse, error,
) {
	caller, err := m.callerFn(ctx)
	if err != nil {
		return nil, err
	}
	val, _, err := m.programListShipments.Eval(map[string]interface{}{
		"caller":  caller,
		"request": request,
	})
	if err != nil {
		return nil, err
	}
	boolVal, ok := val.Value().(bool)
	if !ok {
		return nil, nil // TODO: Return error.
	}
	if !boolVal {
		return nil, nil // TODO: Return error.
	}

	return m.next.ListShipments(ctx, request)
}

func (m *FreightServiceAuthorizationMiddleware) CreateShipment(
	ctx context.Context,
	request *CreateShipmentRequest,
) (
	*Shipment, error,
) {
	caller, err := m.callerFn(ctx)
	if err != nil {
		return nil, err
	}
	val, _, err := m.programCreateShipment.Eval(map[string]interface{}{
		"caller":  caller,
		"request": request,
	})
	if err != nil {
		return nil, err
	}
	boolVal, ok := val.Value().(bool)
	if !ok {
		return nil, nil // TODO: Return error.
	}
	if !boolVal {
		return nil, nil // TODO: Return error.
	}

	return m.next.CreateShipment(ctx, request)
}

func (m *FreightServiceAuthorizationMiddleware) UpdateShipment(
	ctx context.Context,
	request *UpdateShipmentRequest,
) (
	*Shipment, error,
) {
	return m.next.UpdateShipment(ctx, request)
}

func (m *FreightServiceAuthorizationMiddleware) DeleteShipment(
	ctx context.Context,
	request *DeleteShipmentRequest,
) (
	*Shipment, error,
) {
	caller, err := m.callerFn(ctx)
	if err != nil {
		return nil, err
	}
	response, err := m.next.DeleteShipment(ctx, request)
	if err != nil {
		return nil, err
	}
	val, _, err := m.programDeleteShipment.Eval(map[string]interface{}{
		"caller":   caller,
		"request":  request,
		"response": response,
	})
	if err != nil {
		return nil, err
	}
	boolVal, ok := val.Value().(bool)
	if !ok {
		return nil, nil // TODO: Return error.
	}
	if !boolVal {
		return nil, nil // TODO: Return error.
	}
	return response, nil
}

func (m *FreightServiceAuthorizationMiddleware) BatchGetShipments(
	ctx context.Context,
	request *BatchGetShipmentsRequest,
) (
	*BatchGetShipmentsResponse, error,
) {
	caller, err := m.callerFn(ctx)
	if err != nil {
		return nil, err
	}
	response, err := m.next.BatchGetShipments(ctx, request)
	if err != nil {
		return nil, err
	}
	val, _, err := m.programBatchGetShipments.Eval(map[string]interface{}{
		"caller":   caller,
		"request":  request,
		"response": response,
	})
	if err != nil {
		return nil, err
	}
	boolVal, ok := val.Value().(bool)
	if !ok {
		return nil, nil // TODO: Return error.
	}
	if !boolVal {
		return nil, nil // TODO: Return error.
	}
	return response, nil
}

func (m *FreightServiceAuthorizationMiddleware) SetIamPolicy(
	ctx context.Context,
	request *v11.SetIamPolicyRequest,
) (
	*v11.Policy, error,
) {
	return m.next.SetIamPolicy(ctx, request)
}

func (m *FreightServiceAuthorizationMiddleware) GetIamPolicy(
	ctx context.Context,
	request *v11.GetIamPolicyRequest,
) (
	*v11.Policy, error,
) {
	return m.next.GetIamPolicy(ctx, request)
}

func (m *FreightServiceAuthorizationMiddleware) TestIamPermissions(
	ctx context.Context,
	request *v11.TestIamPermissionsRequest,
) (
	*v11.TestIamPermissionsResponse, error,
) {
	return m.next.TestIamPermissions(ctx, request)
}
