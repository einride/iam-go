syntax = "proto3";

package einride.authorization.example.v1;

option go_package = "go.einride.tech/authorization-aip/proto/gen/einride/authorization/example/v1;authorizationexamplev1";
option java_multiple_files = true;
option java_outer_classname = "FreightServiceProto";
option java_package = "tech.einride.authorization.example.v1";

import "einride/authorization/example/v1/shipment.proto";
import "einride/authorization/example/v1/shipper.proto";
import "einride/authorization/example/v1/site.proto";
import "einride/authorization/v1/annotations.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/iam/v1/iam_policy.proto";
import "google/iam/v1/policy.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

// This API represents a simple freight service.
//
// It defines the following resource model:
//
// - The API has a collection of [Shipper][einride.example.freight.v1.Shipper]
//   resources, named `shippers/*`
//
// - Each Shipper has a collection of [Site][einride.example.freight.v1.Site]
//   resources, named `shippers/*/sites/*`
//
// - Each Shipper has a collection of [Shipment][einride.example.freight.v1.Shipment]
//   resources, named `shippers/*/shipments/*`
service FreightService {
  option (google.api.default_host) = "authorization-example.einride.tech";

  // Get a shipper.
  // See: https://google.aip.dev/131 (Standard methods: Get).
  rpc GetShipper(GetShipperRequest) returns (Shipper) {
    option (google.api.http) = {
      get: "/v1/{name=shippers/*}"
    };
    option (google.api.method_signature) = "name";
    option (einride.authorization.v1.policy) = {
      permission: "freight.shippers.get"
      decision_point: BEFORE
      description: "The caller must have permission to get the shipper."
      expression: "test(caller, request.name)"
    };
  }

  // List shippers.
  // See: https://google.aip.dev/132 (Standard methods: List).
  rpc ListShippers(ListShippersRequest) returns (ListShippersResponse) {
    option (google.api.http) = {
      get: "/v1/shippers"
    };
    option (einride.authorization.v1.policy) = {
      permission: "freight.shippers.list"
      decision_point: BEFORE
      description: "The caller must have permission to list all shippers."
      expression: "test(caller, '*')"
    };
  }

  // Create a shipper.
  // See: https://google.aip.dev/133 (Standard methods: Create).
  rpc CreateShipper(CreateShipperRequest) returns (Shipper) {
    option (google.api.http) = {
      post: "/v1/shippers"
      body: "shipper"
    };
    option (google.api.method_signature) = "shipper";
    option (einride.authorization.v1.policy) = {
      permission: "freight.shippers.create"
      decision_point: BEFORE
      description: "The caller must have permission to create new shippers."
      expression: "test(caller, '*')"
    };
  }

  // Update a shipper.
  // See: https://google.aip.dev/134 (Standard methods: Update).
  rpc UpdateShipper(UpdateShipperRequest) returns (Shipper) {
    option (google.api.http) = {
      patch: "/v1/{shipper.name=shippers/*}"
      body: "shipper"
    };
    option (google.api.method_signature) = "shipper,update_mask";
    option (einride.authorization.v1.policy) = {
      permission: "freight.shippers.update"
      decision_point: BEFORE
      description: "The caller must have permission to update the shipper."
      expression: "test(caller, request.shipper.name)"
    };
  }

  // Delete a shipper.
  // See: https://google.aip.dev/135 (Standard methods: Delete).
  // See: https://google.aip.dev/164 (Soft delete).
  rpc DeleteShipper(DeleteShipperRequest) returns (Shipper) {
    option (google.api.http) = {
      delete: "/v1/{name=shippers/*}"
    };
    option (google.api.method_signature) = "name";
    option (einride.authorization.v1.policy) = {
      permission: "freight.shippers.delete"
      decision_point: BEFORE
      description: "The caller must have permission to delete the shipper."
      expression: "test(caller, request.name)"
    };
  }

  // Get a site.
  // See: https://google.aip.dev/131 (Standard methods: Get).
  rpc GetSite(GetSiteRequest) returns (Site) {
    option (google.api.http) = {
      get: "/v1/{name=shippers/*/sites/*}"
    };
    option (google.api.method_signature) = "name";
    option (einride.authorization.v1.policy) = {
      decision_point: BEFORE
      permission: "freight.sites.get"
      description: "The caller must have permission to get the site."
      expression: "test(caller, request.name)"
    };
  }

  // List sites for a shipper.
  // See: https://google.aip.dev/132 (Standard methods: List).
  rpc ListSites(ListSitesRequest) returns (ListSitesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=shippers/*}/sites"
    };
    option (google.api.method_signature) = "parent";
    option (einride.authorization.v1.policy) = {
      permission: "freight.sites.list"
      decision_point: BEFORE
      description: "The caller must have permission to list all sites under the parent shipper."
      expression: "test(caller, request.parent)"
    };
  }

  // Create a site.
  // See: https://google.aip.dev/133 (Standard methods: Create).
  rpc CreateSite(CreateSiteRequest) returns (Site) {
    option (google.api.http) = {
      post: "/v1/{parent=shippers/*}/sites"
      body: "site"
    };
    option (google.api.method_signature) = "parent,site";
    option (einride.authorization.v1.policy) = {
      permission: "freight.sites.create"
      decision_point: BEFORE
      description: "The caller must have permission to create new sites under the parent shipper."
      expression: "test(caller, request.parent)"
    };
  }

  // Update a site.
  // See: https://google.aip.dev/134 (Standard methods: Update).
  rpc UpdateSite(UpdateSiteRequest) returns (Site) {
    option (google.api.http) = {
      patch: "/v1/{site.name=shippers/*/sites/*}"
      body: "site"
    };
    option (google.api.method_signature) = "site,update_mask";
    option (einride.authorization.v1.policy) = {
      permission: "freight.sites.update"
      decision_point: BEFORE
      description: "The caller must have permission to update the site."
      expression: "test(caller, request.site.name)"
    };
  }

  // Delete a site.
  // See: https://google.aip.dev/135 (Standard methods: Delete).
  // See: https://google.aip.dev/164 (Soft delete).
  rpc DeleteSite(DeleteSiteRequest) returns (Site) {
    option (google.api.http) = {
      delete: "/v1/{name=shippers/*/sites/*}"
    };
    option (google.api.method_signature) = "name";
    option (einride.authorization.v1.policy) = {
      permission: "freight.sites.delete"
      decision_point: BEFORE
      description: "The caller must have permission to delete the site."
      expression: "test(caller, request.name)"
    };
  }

  // Get a shipment.
  // See: https://google.aip.dev/131 (Standard methods: Get).
  rpc GetShipment(GetShipmentRequest) returns (Shipment) {
    option (google.api.http) = {
      get: "/v1/{name=shippers/*/shipments/*}"
    };
    option (google.api.method_signature) = "name";
    option (einride.authorization.v1.policy) = {
      permission: "freight.shipments.get"
      decision_point: AFTER
      description:
        "The caller must have permission to get the shipment"
        ", or the caller must have permission to get shipments from the shipment's origin site"
        ", or the caller must have permission to get shipments to the shipment's destination site."
      expression: "test_any(caller, [request.name, response.origin_site, response.destination_site])"
    };
  }

  // List shipments for a shipper.
  // See: https://google.aip.dev/132 (Standard methods: List).
  rpc ListShipments(ListShipmentsRequest) returns (ListShipmentsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=shippers/*}/shipments"
    };
    option (google.api.method_signature) = "parent";
    option (einride.authorization.v1.policy) = {
      permission: "freight.shipments.list"
      decision_point: BEFORE
      description: "The caller must have permission to list all shipments under the parent shipper."
      expression: "test(caller, request.parent)"
    };
  }

  // Create a shipment.
  // See: https://google.aip.dev/133 (Standard methods: Create).
  rpc CreateShipment(CreateShipmentRequest) returns (Shipment) {
    option (google.api.http) = {
      post: "/v1/{parent=shippers/*}/shipments"
      body: "shipment"
    };
    option (google.api.method_signature) = "parent,shipment";
    option (einride.authorization.v1.policy) = {
      permission: "freight.shipments.create"
      decision_point: BEFORE
      description:
        "The caller must have permission to create shipments under the parent shipper"
        ", or the caller must have permission to create shipments from the shipment's origin site"
        ", or the caller must have permission to create shipments to the shipment's destination site."
      expression: "test_any(caller, [request.parent, request.shipment.origin_site, request.shipment.destination_site])"
    };
  }

  // Update a shipment.
  // See: https://google.aip.dev/134 (Standard methods: Update).
  rpc UpdateShipment(UpdateShipmentRequest) returns (Shipment) {
    option (google.api.http) = {
      patch: "/v1/{shipment.name=shippers/*/shipments/*}"
      body: "shipment"
    };
    option (google.api.method_signature) = "shipment,update_mask";
    option (einride.authorization.v1.policy) = {
      permission: "freight.shipments.update"
      decision_point: CUSTOM
      description:
        "The caller must have permission to update the shipment"
        ", or the caller must have permission to update shipments from the shipment's original origin site"
        ", or the caller must have permission to update shipments to the shipment's original destination site."
    };
  }

  // Delete a shipment.
  // See: https://google.aip.dev/135 (Standard methods: Delete).
  // See: https://google.aip.dev/164 (Soft delete).
  rpc DeleteShipment(DeleteShipmentRequest) returns (Shipment) {
    option (google.api.http) = {
      delete: "/v1/{name=shippers/*/shipments/*}"
    };
    option (google.api.method_signature) = "name";
    option (einride.authorization.v1.policy) = {
      permission: "freight.shipments.delete"
      decision_point: AFTER
      description: "The caller must have permission to delete the shipment."
      expression: "test(caller, request.name)"
    };
  }

  // Batch get shipments.
  // See: https://google.aip.dev/231 (Batch methods: Get).
  rpc BatchGetShipments(BatchGetShipmentsRequest) returns (BatchGetShipmentsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=shippers/*}/shipments:batchGet"
    };
    option (einride.authorization.v1.policy) = {
      permission: "freight.shipments.get"
      decision_point: AFTER
      description:
        "The caller must have permission to get all shipments under the parent shipper"
        ", or the caller must have permission to get each of the requested shipments."
      expression:
        "test(caller, request.parent)"
        " || response.shipments.all(s, test_any(caller, [s.name, s.origin_site, s.destination_site]))"
    };
  }

  option (einride.authorization.v1.roles) = {
    role {
      name: "roles/freight.admin"
      title: "Freight Admin"
      description: "Full admin permissions to freight."
      permission: "freight.shipments.get"
      permission: "freight.shipments.list"
      permission: "freight.shipments.create"
      permission: "freight.shipments.update"
      permission: "freight.shipments.delete"
      permission: "freight.sites.get"
      permission: "freight.sites.list"
      permission: "freight.sites.create"
      permission: "freight.sites.update"
      permission: "freight.sites.delete"
      permission: "freight.shipments.get"
      permission: "freight.shipments.list"
      permission: "freight.shipments.create"
      permission: "freight.shipments.update"
      permission: "freight.shipments.delete"
      permission: "freight.setIamPolicy"
      permission: "freight.getIamPolicy"
      permission: "freight.testIamPermissions"
    }
    role {
      name: "roles/freight.viewer"
      title: "Freight Viewer"
      description: "View permissions to freight."
      permission: "freight.shipments.get"
      permission: "freight.shipments.list"
      permission: "freight.sites.get"
      permission: "freight.sites.list"
      permission: "freight.shipments.get"
      permission: "freight.shipments.list"
    }
  };

  // Sets the access control policy on the specified shipper, site or shipment.
  rpc SetIamPolicy(google.iam.v1.SetIamPolicyRequest) returns (google.iam.v1.Policy) {
    option (google.api.http) = {
      post: "/v1/{resource=shippers/*}:setIamPolicy"
      body: "*"
      additional_bindings {
        post: "/v1/{resource=shippers/*/sites/*}:setIamPolicy"
        body: "*"
      }
      additional_bindings {
        post: "/v1/{resource=shippers/*/shipments/*}:setIamPolicy"
        body: "*"
      }
    };
    option (google.api.method_signature) = "resource,policy";
    option (einride.authorization.v1.policy) = {
      permission: "freight.setIamPolicy"
      decision_point: BEFORE
      description: "The caller must have permission to set the resource's IAM policy."
      expression: "test(caller, request.resource)"
    };
  }

  // Gets the access control policy for a shipper, site or shipment resource.
  //
  // Returns an empty policy if the resource exists and does not have a policy
  // set.
  rpc GetIamPolicy(google.iam.v1.GetIamPolicyRequest) returns (google.iam.v1.Policy) {
    option (google.api.http) = {
      post: "/v1/{resource=shippers/*}:getIamPolicy"
      body: "*"
      additional_bindings {
        post: "/v1/{resource=shippers/*/sites/*}:getIamPolicy"
        body: "*"
      }
      additional_bindings {
        post: "/v1/{resource=shippers/*/shipments/*}:getIamPolicy"
        body: "*"
      }
    };
    option (google.api.method_signature) = "resource";
    option (einride.authorization.v1.policy) = {
      permission: "freight.getIamPolicy"
      decision_point: BEFORE
      description: "The caller must have permission to get the resource's IAM policy."
      expression: "test(caller, request.resource)"
    };
  }

  // Returns the permissions that a caller has on the specified shipper or
  // site or shipment.
  //
  // Note: This operation is designed to be used for building permission-aware
  // UIs and command-line tools, not for authorization checking. This operation
  // may "fail open" without warning.
  rpc TestIamPermissions(google.iam.v1.TestIamPermissionsRequest) returns (google.iam.v1.TestIamPermissionsResponse) {
    option (google.api.http) = {
      post: "/v1/{resource=shippers/*}:testIamPermissions"
      body: "*"
      additional_bindings {
        post: "/v1/{resource=shippers/*/sites/*}:testIamPermissions"
        body: "*"
      }
      additional_bindings {
        post: "/v1/{resource=shippers/*/shipments/*}:testIamPermissions"
        body: "*"
      }
    };
    option (google.api.method_signature) = "resource,permissions";
    option (einride.authorization.v1.policy) = {
      permission: "freight.testIamPermissions"
      decision_point: BEFORE
      description: "The caller must have permission to test IAM permissions on the resource."
      expression: "test(caller, request.resource)"
    };
  }
}

// Request message for FreightService.GetShipper.
message GetShipperRequest {
  // The resource name of the shipper to retrieve.
  // Format: shippers/{shipper}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "authorization-example.einride.tech/Shipper"
  ];
}

// Request message for FreightService.ListShippers.
message ListShippersRequest {
  // Requested page size. Server may return fewer shippers than requested.
  // If unspecified, server will pick an appropriate default.
  int32 page_size = 1;

  // A token identifying a page of results the server should return.
  // Typically, this is the value of
  // [ListShippersResponse.next_page_token][einride.example.freight.v1.ListShippersResponse.next_page_token]
  // returned from the previous call to `ListShippers` method.
  string page_token = 2;
}

// Response message for FreightService.ListShippers.
message ListShippersResponse {
  // The list of shippers.
  repeated Shipper shippers = 1;

  // A token to retrieve next page of results.  Pass this value in the
  // [ListShippersRequest.page_token][einride.example.freight.v1.ListShippersRequest.page_token]
  // field in the subsequent call to `ListShippers` method to retrieve the next
  // page of results.
  string next_page_token = 2;
}

// Request message for FreightService.CreateShipper.
message CreateShipperRequest {
  // The shipper to create.
  Shipper shipper = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request message for FreightService.UpdateShipper.
message UpdateShipperRequest {
  // The shipper to update with. The name must match or be empty.
  // The shipper's `name` field is used to identify the shipper to be updated.
  // Format: shippers/{shipper}
  Shipper shipper = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

// Request message for FreightService.DeleteShipper.
message DeleteShipperRequest {
  // The resource name of the shipper to delete.
  // Format: shippers/{shipper}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "authorization-example.einride.tech/Shipper"
  ];
}

// Request message for FreightService.GetSite.
message GetSiteRequest {
  // The resource name of the site to retrieve.
  // Format: shippers/{shipper}/sites/{site}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "authorization-example.einride.tech/Site"
  ];
}

// Request message for FreightService.ListSites.
message ListSitesRequest {
  // The resource name of the parent, which owns this collection of sites.
  // Format: shippers/{shipper}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "authorization-example.einride.tech/Shipper"
    }
  ];

  // Requested page size. Server may return fewer sites than requested.
  // If unspecified, server will pick an appropriate default.
  int32 page_size = 2;

  // A token identifying a page of results the server should return.
  // Typically, this is the value of
  // [ListSitesResponse.next_page_token][einride.example.freight.v1.ListSitesResponse.next_page_token]
  // returned from the previous call to `ListSites` method.
  string page_token = 3;
}

// Response message for FreightService.ListSites.
message ListSitesResponse {
  // The list of sites.
  repeated Site sites = 1;

  // A token to retrieve next page of results.  Pass this value in the
  // [ListSitesRequest.page_token][einride.example.freight.v1.ListSitesRequest.page_token]
  // field in the subsequent call to `ListSites` method to retrieve the next
  // page of results.
  string next_page_token = 2;
}

// Request message for FreightService.CreateSite.
message CreateSiteRequest {
  // The resource name of the parent shipper for which this site will be created.
  // Format: shippers/{shipper}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "authorization-example.einride.tech/Shipper"
    }
  ];
  // The site to create.
  Site site = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for FreightService.UpdateSite.
message UpdateSiteRequest {
  // The site to update with. The name must match or be empty.
  // The site's `name` field is used to identify the site to be updated.
  // Format: shippers/{shipper}/sites/{site}
  Site site = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

// Request message for FreightService.DeleteSite.
message DeleteSiteRequest {
  // The resource name of the site to delete.
  // Format: shippers/{shipper}/sites/{site}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "authorization-example.einride.tech/Site"
  ];
}

// Request message for FreightService.GetShipment.
message GetShipmentRequest {
  // The resource name of the shipment to retrieve.
  // Format: shippers/{shipper}/shipments/{shipment}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "authorization-example.einride.tech/Shipment"
  ];
}

// Request message for FreightService.ListShipments.
message ListShipmentsRequest {
  // The resource name of the parent, which owns this collection of shipments.
  // Format: shippers/{shipper}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "authorization-example.einride.tech/Shipper"
    }
  ];

  // Requested page size. Server may return fewer shipments than requested.
  // If unspecified, server will pick an appropriate default.
  int32 page_size = 2;

  // A token identifying a page of results the server should return.
  // Typically, this is the value of
  // [ListShipmentsResponse.next_page_token][einride.example.freight.v1.ListShipmentsResponse.next_page_token]
  // returned from the previous call to `ListShipments` method.
  string page_token = 3;
}

// Response message for FreightService.ListShipments.
message ListShipmentsResponse {
  // The list of shipments.
  repeated Shipment shipments = 1;

  // A token to retrieve next page of results.  Pass this value in the
  // [ListShipmentsRequest.page_token][einride.example.freight.v1.ListShipmentsRequest.page_token]
  // field in the subsequent call to `ListShipments` method to retrieve the next
  // page of results.
  string next_page_token = 2;
}

// Request message for FreightService.CreateShipment.
message CreateShipmentRequest {
  // The resource name of the parent shipper for which this shipment will be created.
  // Format: shippers/{shipper}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "authorization-example.einride.tech/Shipper"
    }
  ];
  // The shipment to create.
  Shipment shipment = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for FreightService.UpdateShipment.
message UpdateShipmentRequest {
  // The shipment to update with. The name must match or be empty.
  // The shipment's `name` field is used to identify the shipment to be updated.
  // Format: shippers/{shipper}/shipments/{shipment}
  Shipment shipment = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

// Request message for FreightService.DeleteShipment.
message DeleteShipmentRequest {
  // The resource name of the shipment to delete.
  // Format: shippers/{shipper}/shipments/{shipment}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "authorization-example.einride.tech/Shipment"
  ];
}

// Request message for FreightService.BatchGetShipments.
message BatchGetShipmentsRequest {
  // The parent resource shared by all shipments being retrieved.
  // If this is set, the parent of all of the shipments specified in `names`
  // must match this field.
  // Format: `shippers/{shipper}`
  string parent = 1 [
    (google.api.resource_reference) = {
      type: "authorization-example.einride.tech/Shipper"
    }
  ];

  // The names of the shipments to retrieve.
  // A maximum of 1000 shipments can be retrieved in a batch.
  // Format: `shippers/{shipper}/shipments/{shipment}`
  repeated string names = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "authorization-example.einride.tech/Shipment"
    }
  ];
}

// Response message for FreightService.BatchGetShipments.
message BatchGetShipmentsResponse {
  // Shipments requested.
  repeated Shipment shipments = 1;
}
